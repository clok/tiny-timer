use strict;
use warnings;

package TinyTimer;

use Time::HiRes;

my $VERSION = 1.0;

sub new {
	my $class = shift;
	$class = ref($class) || $class;

	my $self = {};
	$self->{START}  = undef;
	$self->{STOP}   = undef;
	$self->{DELTA}  = undef;
	$self->{LOCAL}  = undef;
	$self->{_START} = undef;
	$self->{_STOP}  = undef;
	$self->{_SPLIT} = undef;

	bless $self, $class;

	$self->_init;

	return $self;
}

sub start {
	my $self = shift;
	$self->{START} = Time::HiRes::time;
	$self->{_START} = $self->{START};
}

sub stop {
	my $self = shift;
	$self->{STOP} = Time::HiRes::time;
	$self->{_START} = $self->{STOP};
	$self->_delta;
}

sub delta {
	my $self = shift;
	return sprintf("%.6f", $self->{DELTA});
}

sub split {
	my $self = shift;
	$self->{_STOP} = Time::HiRes::time;
	$self->_split;
	$self->{_START} = Time::HiRes::time;
	return sprintf("%.6f", $self->{_SPLIT});;
}

sub local {
	my $self = shift;
	return $self->{LOCAL};
}

sub _delta {
	my $self = shift;
	$self->{DELTA} = $self->{STOP} - $self->{START};
}

sub _split {
	my $self = shift;
	$self->{_SPLIT} = $self->{_STOP} - $self->{_START};
}

sub _init {
	my $self = shift;
	$self->{LOCAL} = `date`;
	chomp $self->{LOCAL};
}

1;

__END__

=head1 NAME

TinyTimer - A Very simple timer module for perl

=head1 SYNOPSIS

Simply create a new TinyTimer object:

my $timer = TinyTimer->new;

Then "start" and "stop" in your code for time deltas.

$timer->start;
<<code>>
.
.
.
$time->stop;

On "stop" the "delta" property is populated and can be used.

print $timer->delta;

Output:
>> 0.0003447273118

That's it!

=head1 MAIN METHODS

=over 4

=item B<new>

Constructor for TinyTimer

=item B<start>

Starts a new timer at '0' ('Time::HiRes::time' populates the "start" property)

=item B<stop>

Takes current time, 'Time::HiRes::time', and populates the "stop" property.
This will also call "_delta"

=item B<delta>

Returns the "delta" property.

=item B<split>

Returns a split time from the last '_stop'. Will initiate a '_stop'

=item B<local>

Returns the "local" property generated by "_init".

=back

=head1 PRIVATE METHODS

=over 4

=item B<_init>

Adds a localtime returned from `date` useful for reference to overall
start time of scripts.

=item B<_delta>

Takes the currently stored "start" & "stop" and calculates the delta.
Populates the "delta" property.

=item B<_split>

Takes the currently stored "_start" & "_stop" and calculates the delta.
Populates the "_split" property.

=back

=head1 AUTHOR

Derek Smith
drsmith.phys [at] gmail.com

=cut
